王丹波
邮箱：g-wangdb@tedu.cn
微信：24830872

课程资料：
https://pan.baidu.com/s/1dGN-1qEXE7DSbKWgeCh6NQ
提取码：uzzx
下载：CV_advance.zip包

Linux课程资料包解压指令（解压后无乱码）：unzip -O cp936 CV_advance.zip

人工智能课程内容：
1）基本理论、思想：机器学习、深度学习
2）计算机视觉
   - 数字图像处理基础
   - 深度学习图像识别：图像分类、目标检测、图像分割、OCR、人脸检测与识别
3）自然语言处理
4）工具与框架


CNN: 卷积 神经网络

卷积池化：对图像的特征进行提纯、浓缩
神经网络：分类器

机器学习：符号学派（公式符号推演），可解释性强，适合结构化数据
深度学习：连接学派（大量神经元的连接），可解释性弱，适合非结构化数据

向量、矩阵、张量：数学概念
数组：计算机概念，C/Java的顺序结构
列表：Python语言中的顺序结构


图像分类中如何优化模型
1）数据优化
  - 数据量尽可能大，样本特征丰富
  - 数据增强：翻转、平移、裁剪、主动加入噪声
  - 色彩变化：灰度化、二值化、色彩抖动
  - 训练时候适当降低数据质量，预测时候提升数据质量
2）参数优化
  - 调整学习率：先大后小
  - dropout：调整丢弃率
  - 正则化：调整正则强度
  - 卷积运算：调整卷积核数量，增加数量能学习更多的特征
  - 神经网络：调整神经元数量，增加神经元数量学习能力变强
3）模型优化
  - 更换复杂、参数数量更多、精度更高、深度更深的模型
4）外部优化
  - 集成学习

BN: 批量归一化，每一层都做归一化操作，整体对数据进行平移、缩放。作用是缓解梯度消失、缓解过拟合、增加模型稳定性、加快收敛速度


深度学习回顾
组成
  1）感知机、神经网络
  2）激活函数
训练法则
  3）损失函数与梯度下降
  4）反向传播算法
神经网络模型改善与优化
  5）卷积神经网络

卷积层次越浅，提取特征越局部、越具体
卷积层次越深，提取特征越具有全局性、越抽象


计算机视觉高级部分课程介绍
1. 内容：目标检测、图像分割、OCR、人脸检测与识别
2. 来源：每个专题内容由一系列论文组成
3. 课程难度会增加，抓大放小、先粗后细
4. 最终的任务：学会检索论文、阅读论文（论文解决什么问题、采用了什么方法、取得了什么效果、特点与适用性）

注：课程中涉及到的主要模型论文thesis.zip包中

CV_advance包的内容：
code: 案例代码
notes: 笔记讲义
dataset: 数据集
tools：数据标注工具

图像分类问题：整张图像分类
目标检测问题：局部区域图像分类
图像分割：对每个像素进行分类

两阶段检测：先生成候选区，再做分类+回归
一阶段检测：做分类+回归

目标检测评价指标
1. 分类问题：查准率、召回率、F1
2. 定位问题：交并比

端对端：所有步骤整合到同一个模型中，一个模型输入，同一个模型产生最终输出


矩阵放大：上采样，实现方式
1）最邻近查值
2）双线性差值
3）转置卷积


RCNN系列总结
1. RCNN
  1) 解决什么问题：实现图片物体检测
  2) 采用了什么方法
     - SS算法产生大约2K候选区
     - 分别对候选区域卷积，提取特征
     - 使用一组SVM进行分类
  3) 取得了什么效果：mAP 58.5%
  4) 特点：混搭图像算法、深度学习、机器学习模型；速度较慢

2. Fast RCNN
  1) 解决什么问题：对RCNN进行性能优化、提升
  2) 采用了什么方法：
     - 对整张图像卷积，得到整个图像的特征图
     - SS算法产生大约2K候选区，通过ROI Prejection算法取出候选区的特征图
     - 特征图经过ROI Pooling缩放到相同大小，经过两层fc, 进行分类、定位预测
  3) 取得了什么效果：速度相对RCNN有很大提升
  4) 特点：速度有明显提升，但检测速度还是较慢；精度尚可

3. Faster RCNN
  1) 解决什么问题：提升Fast RCNN速度和精度
  2) 采用了什么方法
    - 采用新的候选区产生方式，RPN网络从特征图上产生候选区
    - 引入Anchor Box机制，提升召回率
  3) 取得了什么效果：检测速度每秒钟5帧，完整端对端模型
  4) 特点：检测精度较高，速度较慢

YOLO系列总结
1. YOLO1
  1) 解决什么问题：快速目标检测的问题
  2) 采用了什么方法
    - 预定义候选框，跳过候选区产生，整个图片划分成S*S，每个格子中预测B个bounding box
  3) 取得了什么效果：完整版45FPS, 精简版155FPS
  4) 特点：检测速度很快，精度较差

2. YOLO2
  1) 解决什么问题：提升YOLO1检测精度
  2) 采用了什么方法：BN，高分辨分类器、Anchor Box、维度聚类、DarkNet19、直接定位、细粒度特征、多尺度训练......
  3) 取得了什么效果：比YOLO1 mAP提升了15%
  4) 特点：检测速度很快，精度有了很大提升，精度不够

3. YOLO3
  1) 解决什么问题：提升YOLO2检测精度
  2) 采用了什么方法：更深的骨干网DarkNet53，逻辑分类代替softmax，特征金字塔、多尺度检测
  3) 取得了什么效果：能够兼顾检测速度、精度
  4) 特点：能够兼顾检测速度、精度

4. YOLO4
  1) 解决什么问题：提升YOLO3检测精度、速度
  2）采用了什么方法：在各个阶段都执行了改进
      - 输入：Mosaic数据增强、子对抗训练、交叉小批量归一化
      - 骨干网：CSPDarkNet53、Mish、Dropblock
      - Neck：SPP模块、FPN+PAN
      - 输出：采用新的IOU
  3) 取得了什么效果：AP值提升了10%，速度提升12%
  4) 特点：能够兼顾检测速度、精度


目标检测标注工具：LabelImg (CV_advance/tools/labelImg-master.zip)




实验：运行LabelImg标注工具，执行标注
1. 解压出：CV_advance/tools/labelImg-master.zip，拷贝到pycharm项目目录下
2. 安装PyQt5软件包，安装执行：
pip3 install  --user PyQt5==5.14.1 --index-url https://pypi.tuna.tsinghua.edu.cn/simple/  --trusted-host https://pypi.tuna.tsinghua.edu.cn
3. 从ftp的06_ML/day16/目录下下载football3.zip（测试图像），拷贝到某个目录下
4. 执行labelImg-master目录下的labelImg.py
    python3 labelImg.py
5. 选中图像，进行标注，保存文件，看懂数据文件的格式
6. 更换为YOLO数据格式，标注并保存文件，看懂YOLO数据标注格式


生成候选区的方法：
1）滑动窗口法：穷举法
2）Selective Search算法：纯图像算法，在原图上产生候选区
3）RPN网络：从特征图上产生候选区


B站：YOLO4 作者 亲自讲解



实验：训练YOLO3模型
1. 在AIStudio公共项目下搜索：YOLO3
2. 点击进入项目主页，点击fork，打分支版本到自己的项目中
3. 启动：选GPU环境
4. 依次执行每个代码块
   代码块一：解压数据集
   代码块二：模型训练
        "num_epochs": 50,  # 训练轮次
        "num_epochs": 50,  # 训练轮次
       "train_batch_size": 16,  # 批次大小，完整版调整为8
       看日志：tail -f logs/train.log
   代码块三：保存推理模型
   代码块四：测试

  注：代码块二不能重复执行，如果要进行下一次训练，需要重启
        要看所有模型实现细节，看我发的tensorflow版本的源码


YOLO3更多实现细节：https://www.paddlepaddle.org.cn/tutorials/projectdetail/1507609
或者看tensorflow版本的源码




目标检测的应用举例
1）利用目标检测实现瓷砖瑕疵加测：https://aistudio.baidu.com/aistudio/projectdetail/3353241?contributionType=1
2）利用目标检测实现林业、农业害虫识别（AIStudio中搜索）
3）利用目标检测检测公路滚石、山体滑坡、泥石流
4）利用目标检测检测电瓶车入户
5）利用目标检测检测，实现雪茄烟计数
6）利用目标检测检测，实现手机屏幕瑕疵检测（放大20倍图像执行检测）
7）利用目标检测检测，检测自动插秧机插播行距，有没有漏株
8）利用目标检测检测，检测润滑油储油罐盖子打开、关闭状态
9）卫星遥感图像检测，检测乱倒建筑laji、检测污染......
10）利用目标检测检测，检测车辆是否超载
11）利用目标检测检测，检测安全帽、安全带、口罩
12）利用目标检测检测，检测腰椎间盘突出（计算机辅助诊疗）
13) 利用目标检测检测，检测行人，对人流量进行统计

CNN：卷积神经网络
RNN：循环神经网络
DNN：深度神经网络
ANN：人工神经网络


RNN：原生循环神经网络
LSTM：RNN变种
GRU:LSTM的变种


实验：训练CRNN+CTC模型 实现文字识别
1. 在公共项目中搜索：文字识别-CRNN，进入项目主页，fork到自己的项目中
2. 启动项目，依次执行每个代码块
   代码块一：解压数据集
   代码块二：解压预训练模型
   代码块三：数据集预处理（过滤符号）
   代码块四：模型定义、训练
   代码块五：保存推理模型
   代码块六：测试，修改以下变量为要识别的图片名称

    #测试自定义图片
    img_file ="piaoju.png"

   看日志：tail -f logs/train.log


实验：调用PaddleHub第三方库实现票据文字识别
1. 解压CV_advance/code/paddle_hub_ocr.zip


总结：如何提升OCR精度
1. 数据
  1）数据样板充足
  2）训练阶段，可以适当降低样本质量，推理预测阶段提升样本质量
  3）识别阶段，样本亮度不宜太亮/太暗，降噪、适当锐化
  4）识别目标文字保持一个相对合适的比例
  5）尽可能多裁剪掉不相关部分，或者单独取出感兴趣的文字项
  6）对样本进行增强处理：旋转、缩放、裁剪
2. 模型
  1）选择最合适模型
  2）每个文字识别项单独训练一个模型
3. 参数
  1）学习率
  2）输入图像大小
  3）批次大小
  4）正则强度
  5）丢弃率
  6）参数配置：卷积核数量、大小、深度、神经元数量
4. 集成学习
  1）同时采用多个模型识别，投票法取最终结果
5. 外部优化
  1）建立词典
  2）例如改善光照、亮度、减少干扰......



试验：运行FaceNet模型，实现人脸比对
1. 解压出CV_advance/code/facenet_distance.zip，拷贝到pycharm代码目录下
2. 将要比对的人脸照片放到test_img目录
3. 修改get_embedding_distance.py下的
   image_name1 = 'test_img/cc1.png' 
   image_name2 = 'test_img/cc4.png' 
   改成要比对的人脸照片的路径
4. 执行get_embedding_distance.py文件，查看计算出的欧氏距离，取1.05作为阈值












